// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  issues   Issue[]
  votes    Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Issue {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  category    Category
  status      IssueStatus @default(OPEN)
  latitude    Float
  longitude   Float
  address     String?
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  votes Vote[]

  @@index([status])
  @@index([category])
  @@index([createdAt])
}

model Vote {
  id      String @id @default(cuid())
  userId  String
  issueId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@unique([userId, issueId])
}

enum UserRole {
  USER
  ADMIN
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum Category {
  INFRASTRUCTURE
  SAFETY
  ENVIRONMENT
  TRANSPORTATION
  PUBLIC_SERVICES
  COMMUNITY
  OTHER
}
